install.packages(c("BiocManager", "pheatmap"))
cwd(~/Desktop)
cwd("~/Desktop")
### RNA-Seq Analysis
### Made for CM580A3
### Made by Reed Woyda
### 03/22/2021
### This R script:
# 1) takes in FPKM (normalized count data) values OR other normalized count data
#   *this was originally done for this data in Galaxy using Cufflinks:
#     NGS: RNA Analysis >> Cufflinks transcript assembly and FPKM (RPKM) estimates for RNA-Seq data
# 2) calculates the LogFC between a treatment (in replicate) and a control (in replicate)
# 3) Finds which genes are more down or up-regulated
# 4) Identifies which pathways these genes are contained within
# 5) Generates pathway maps for a subset of the identified pathways for which there are genes present from our data set
# 6) Creates a table of the genes, what pathway they are in, adjusted p-values, and various gene IDs
### An awesome resource:
# http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
# Look here for more info on sequencing count normalization
### Install and load pathview() from Bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pathview")
### RNA-Seq Analysis
### Made for CM580A3
### Made by Reed Woyda
### 03/22/2021
### This R script:
# 1) takes in FPKM (normalized count data) values OR other normalized count data
#   *this was originally done for this data in Galaxy using Cufflinks:
#     NGS: RNA Analysis >> Cufflinks transcript assembly and FPKM (RPKM) estimates for RNA-Seq data
# 2) calculates the LogFC between a treatment (in replicate) and a control (in replicate)
# 3) Finds which genes are more down or up-regulated
# 4) Identifies which pathways these genes are contained within
# 5) Generates pathway maps for a subset of the identified pathways for which there are genes present from our data set
# 6) Creates a table of the genes, what pathway they are in, adjusted p-values, and various gene IDs
### An awesome resource:
# http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
# Look here for more info on sequencing count normalization
### Install and load pathview() from Bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pathview")
library(DESeq2)
library(gage)
library(ggplot2)
library(tidyverse)
library(pathview)
library(pheatmap)
library(viridis)
### Load in FPKM data and associated metadata
fpkm_data <- read.csv("RNA-Seq-Dataset-RW-03222021.csv", sep=",", header=TRUE,check.names=FALSE, stringsAsFactors=F)
metaData <- read.csv('RNA-Seq-Metadata-RW-03222021.csv', header = TRUE, sep = ",", stringsAsFactors = TRUE)
### Take a look at the metadata
# DF == Drug Free == Control
# PZA == Pyrazinamide == Treatment group (crucial first-line drug for tuberculosis)
head(metaData)
### Take a look at the raw data
# Here we have the gene counts for DF and PZA in duplicate in columns 4-7
# Column 1 has the KEGG entry ID for the corresponding gene
# Column 2 has the entrez database ID for the corresponding gene
# Column 3 has the gene name
head(fpkm_data)
### Create a heatmap of the normalized counts
# NEED TO WORK ON THIS!
heatmap_data <- fpkm_data[,c(4:7)]
row.names(heatmap_data) <- fpkm_data$gene_short_name
### --- DESeq2 LogFC Analysis ---
### DESeq2 LogFC calculation and combining of treatment groups
# here we only want the gene_id and the FMKP values for control and treatment groups (fpkm_data[,c(1,4:7)])
deseq_TA07 <- DESeqDataSetFromMatrix(countData =  fpkm_data[,c(1,4:7)], colData = metaData, design = ~group, tidy = TRUE)
deseq_TA07 <- DESeq(deseq_TA07)
# Here we create a scatter plot of log2 fold changes (y-axis) versus the mean of the normalized counts (x-axis)
plotMA(deseq_TA07, main = "DESeq2 Log2 Fold Changes", alpha = 0.05)
# Things to try: change the alpha value: example from 0.01 (default) to 0.05 or and extreme 0.005
# Question: What happens to the "amount" significant (blue colored) genes
### Pull out vector LogFC values from DESeq2
# Before we do this, lets see what is contained within the results
head(results(deseq_TA07, c("group", "control", "PZA")))
# What type of statistical test was used to generate the p-value?
# What other information do we have besides the Log2 Fold change?
ctrl_PZA<- results(deseq_TA07, c("group", "control", "PZA"))$log2FoldChange
### Put the LogFC values from DESeq2 ctrl_PZA vector into a data frame
logFC_values <- matrix(data = 0, nrow = 4008, ncol = 1)
# set the column names to reflect treatment group(s)
colnames(logFC_values) <- c("PZA")
# copy over LogFC values
logFC_values.df <- as.data.frame(logFC_values)
# set the rownames as the gene_ids corresponding to each LogFC value
row.names(logFC_values.df) <- fpkm_data$gene_id
logFC_values.df$`PZA` <- ctrl_PZA
### Convert into matrix and transpose it for GAGE input
logFC_values_matrix <- data.matrix(logFC_values.df)
logFC_values_trans <- t(logFC_values_matrix)
### Lets take a look at the non-transposed data to ensure we have non-zero values
head(logFC_values_matrix)
### Load KEGG mtu database
# this data is from a Mycobacterium tuberculosis experiment, thus we are using the 'mtu' database
# you can google the KEGG database to find the species code for your research
kg.mtu <- kegg.gsets(species = "mtu")
kg.mtu = kg.mtu$kg.sets
### Only include ids that are present in your annotations from KEGG
all_ids = unique(unlist(kg.mtu))
### Here lets take a look at the KEGG mtu database
# Have you seen IDs like this before? I hope so! (line 86 should have IDs similar to these)
head(all_ids)
### --- GAGE Analysis ---
# From the GAGE documentation, exprs (argument 1) should be genes as rows and samples as columns
# Generates 3 vectors:
# 1) "greater" (up-regulated) p-values
# 2) "less" (down-regulated) p-values,
# 3) "stats" individual p-value (and test statistics)from dependent pair-wise comparisions,
#    i.e. comparisons between the same experiment vs different controls
res = apply(logFC_values_trans, 1, function(x) gage(x, kg.mtu))
### PZA p-values: Find which is more significant "Greater" or "Less"
# Here we are going to identify, for each GAGE pathway, which p-value is more significant, up or down-regulated
# Create matrix (and dataframe) for values which are up (greater)
p_values_PZA_greater <- matrix(data = 0, nrow = 123, ncol = 2)
colnames(p_values_PZA_greater) <- c("PZA_greater_path","PZA_greater")
p_values_PZA_greater.df <- as.data.frame(p_values_PZA_greater)
p_values_PZA_greater.df$PZA_greater <- res$PZA$greater[,3]
p_values_PZA_greater.df$PZA_greater_path <- row.names(res$PZA$greater)
p_values_PZA_greater.df <- p_values_PZA_greater.df[order(p_values_PZA_greater.df$PZA_greater_path),]
# Create matrix (and dataframe) for values which are down (less) regulated
p_values_PZA_less <- matrix(data = 0, nrow = 123, ncol = 2)
colnames(p_values_PZA_less) <- c("PZA_less_path","PZA_less")
p_values_PZA_less.df <- as.data.frame(p_values_PZA_less)
p_values_PZA_less.df$PZA_less <- res$PZA$less[,3]
p_values_PZA_less.df$PZA_less_path <- row.names(res$PZA$less)
p_values_PZA_less.df <- p_values_PZA_less.df[order(p_values_PZA_less.df$PZA_less_path),]
# This portion does the comparison between down and up-regulated
p_values_PZA <- matrix(data = 0, nrow = 123, ncol = 1)
colnames(p_values_PZA) <- c("PZA_p_val")
rownames(p_values_PZA) <- p_values_PZA_greater.df$PZA_greater_path
i =1
for(i in 1:length(p_values_PZA)){
# here we make sure to deal with 'NA'; if 'NA' is present in both less and greater
if (is.na(p_values_PZA_less.df[i,2]) && is.na(p_values_PZA_greater.df[i,2])){
p_values_PZA[i,1] <- NA
}
# here we make sure to deal with 'NA'; if 'NA' is present in less
else if (is.na(p_values_PZA_less.df[i,2])){
p_values_PZA[i,1] = p_values_PZA_greater.df[i,2]
}
# here we make sure to deal with 'NA'; if 'NA' is present in greater
else if (is.na(p_values_PZA_greater.df[i,2])){
p_values_PZA[i,1] = p_values_PZA_less.df[i,2]
}
# here we check if less is <= greater
else if (p_values_PZA_less.df[i,2] <= p_values_PZA_greater.df[i,2]){
p_values_PZA[i,1] = p_values_PZA_less.df[i,2]
}
# here we check if less > greater
else if((p_values_PZA_less.df[i,2]) > (p_values_PZA_greater.df[i,2])){
p_values_PZA[i,1] = p_values_PZA_greater.df[i,2]
}
}
# finally, put the values into a dataframe
p_values_PZA.df <- as.data.frame(p_values_PZA)
### Make table including all of them
# This is redundant in our case but if you had multiple treatment groups, you would combine them here
# Note: if you had multiple treatment groups you would just repeat the above (lines 67-113) for each treatment group
p_values_all_groups <- matrix(data = 0, nrow = 123, ncol = 1)
colnames(p_values_all_groups) <- c("PZA")
rownames(p_values_all_groups) <- p_values_PZA_greater.df$PZA_greater_path
p_values_all_groups.df <- as.data.frame(p_values_all_groups)
p_values_all_groups.df$PZA <- p_values_PZA.df$PZA_p_val
### Lets make a barplot of the pathways (x-axis) and the adjusted p-values (y-axis)
# First we will remove all pathways with 'NA' for an adjusted p-value
p_values_no_na.df <- drop_na(p_values_all_groups.df)
# Then, we will use ggplot() to create a plot and then ggsave() to save it
p <- ggplot(data = p_values_no_na.df, aes(x = rownames(p_values_no_na.df), y = PZA)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("GAGE Identified PZA Pathways") +
ylab("PZA adjusted p-values") + xlab("PZA Identified Pathways")
ggsave("PZA-adj-p-val-barplot", plot = p, device = "pdf", limitsize = FALSE, dpi = 300, height = 20, width = 20)
# Things to try: replace line 177 with: ggplot(data = p_values_no_na.df, aes(x = reorder(rownames(p_values_no_na.df),PZA)
# This will reorder our data based on the adjusted p-value
# Isn't this prettier?!
# Here you can export the data if you want (uncomment the line)
#write.csv(p_values_no_na.df, "PZA_pathway_pvals.csv")
### END --- GAGE Analysis ---
### --- Pathways: Pathview ---
# Here we will generate some metabolic pathway maps for a visual representation of the gene expression within
# Get at list of KEGG 'mtu' pathways
kegg_pathways_all <- rownames(res$`PZA`$stats)
i = 1
kegg_pathway_IDs = c()
for(i in 1:length(kegg_pathways_all)){
kegg_pathway_IDs[i] <- sapply(strsplit(kegg_pathways_all[i], " "), '[', 1)
}
### Here we will generate a pathway map for the Glycolysis/Gluconeogenesis pathway
# you can generate maps for all of them, but it will be A LOT
# to do that, just replace "mtu00010" with kegg_pathway_IDs on line 152
### Run pathview() on PZA on mtu00010
# this includes all pathways regarless of the p value ie. it is not filtered for <0.05
pathview(logFC_values_trans[1,], pathway.id =  "mtu00010", species = "mtu",
kegg.dir = ".", gene.idtype = "KEGG", out.suffix=row.names(logFC_values_trans)[1], same.layer=F)
### END --- Pathways: Pathview ---
## -- GAGE: list of present genes in pathways ---
### Finally, we will generate a final table which will include the pathway, KEGG ID, entrez ID, gene name, LogFC and adjusted p-value
present_genes = row.names(logFC_values_matrix)
# Create matrix/df to store pathways with associated present genes
gage_pathways_genes <- matrix(data = 0, nrow = 4008, ncol = 6)
colnames(gage_pathways_genes) <- c("pathways","KEGG_ID","gene","entrezID","logFC_PZA","Adj.p_PZA")
gage_pathways_genes.df <- as.data.frame(gage_pathways_genes)
# Extract all pathway names to fill in gage_pathways_genes.df
kg.mtu_matrix <- as.matrix(kg.mtu)
pathways <- matrix(data = 0, nrow = 123, ncol = 1)
colnames(pathways) <- c("pathways")
pathways.df <- as.data.frame(pathways)
pathways.df$pathways <- row.names(kg.mtu_matrix)
# Note: this loop is really meant for many treatment groups, thus it takes awhile (~ 3 min) to run
i = 1 # whole kg.mtu pathway list
j = 1 # for each kg.mtu pathway ie. kg.mtu[[1]] = 35 genes
k = 1 # present genes (always 4008)
l = 1 # index in logFC_values.df (looking to match and report logFC value for each gene)
indx = 1
for(i in 1:length(kg.mtu)){
for(j in 1:length(kg.mtu[[i]])){
for(k in 1:length(present_genes)){
if ( str_detect(kg.mtu[[i]][j], present_genes[k], negate = FALSE)){
gage_pathways_genes.df$pathways[indx] <- pathways.df[i,1]
gage_pathways_genes.df$KEGG_ID[indx] <- present_genes[k]
gage_pathways_genes.df$Adj.p_PZA[indx] <- p_values_all_groups.df$PZA[i]
indx = indx + 1
}
}
}
}
# Loop through build table and fill in individual Isolate gene logFC values
l = 1
l1 = length(gage_pathways_genes.df$KEGG_ID)
l2 = length(logFC_values.df[[1]])
i = 1
for(l in 1:l1){
for (i in 1:l2){
if(row.names(logFC_values.df)[i] == gage_pathways_genes.df$KEGG_ID[l] ){
gage_pathways_genes.df$logFC_PZA[l] <- logFC_values.df$PZA[i]
}
}
}
l = 1
l1 = length(gage_pathways_genes.df$gene )
l2 = length(fpkm_data$gene_id)
i = 1
for(l in 1:l1){
for (i in 1:l2){
if(fpkm_data$gene_id[i] == gage_pathways_genes.df$KEGG_ID[l] ){
gage_pathways_genes.df$gene[l] <- fpkm_data$gene_short_name[i]
gage_pathways_genes.df$entrezID [l] <- fpkm_data$entrez_ID[i]
}
}
}
